#ifndef ABSTRACT_DECL
#define ABSTRACT_DECL(Id, Parent)
#endif

/// CONTEXT_DECL(Id, Parent)
///   Used for Decls that are also DeclContexts. The default behavior is to do
///   the same as for Decl.
#ifndef CONTEXT_DECL
#define CONTEXT_DECL(Id, Parent) DECL(Id, Parent)
#endif

/// ITERABLE_NONGENERIC_DECL(Id, Parent)
///   Used for Decls that are also IterableDeclContexts and DeclContexts. The
///   default behavior is to do the same as for CONTEXT_DECL. This combination
///   does not exist at the moment.
#ifndef ITERABLE_NONGENERIC_DECL
#ifdef ITERABLE_DECL
#define ITERABLE_NONGENERIC_DECL(Id, Parent) ITERABLE_DECL(Id, Parent)
#else
#define ITERABLE_NONGENERIC_DECL(Id, Parent) CONTEXT_DECL(Id, Parent)
#endif
#endif

/// GENERIC_DECL(Id, Parent)
///   Used for Decls that are also GenericContexts. The default behavior is to
///   do the same as for CONTEXT_DECL.
#ifndef GENERIC_DECL
#define GENERIC_DECL(Id, Parent) CONTEXT_DECL(Id, Parent)
#endif

/// ITERABLE_GENERIC_DECL(Id, Parent)
///   Used for Decls that are also IterableDeclContexts and GenericContexts. The
///   default behavior is to do the same as for GENERIC_DECL.
#ifndef ITERABLE_GENERIC_DECL
#ifdef ITERABLE_DECL
#define ITERABLE_GENERIC_DECL(Id, Parent) ITERABLE_DECL(Id, Parent)
#else
#define ITERABLE_GENERIC_DECL(Id, Parent) GENERIC_DECL(Id, Parent)
#endif
#endif

/// CONTEXT_VALUE_DECL(Id, Parent)
///   Used for subclasses of ValueDecl that are also DeclContexts. The default
///   behavior is to do the same as for CONTEXT_DECL.
#ifndef CONTEXT_VALUE_DECL
#ifdef VALUE_DECL
#define CONTEXT_VALUE_DECL(Id, Parent) VALUE_DECL(Id, Parent)
#else
#define CONTEXT_VALUE_DECL(Id, Parent) CONTEXT_DECL(Id, Parent)
#endif
#endif

/// GENERIC_VALUE_DECL(Id, Parent)
///   Used for subclasses of ValueDecl that are also GenericContexts. The
///   default behavior is to do the same as for GENERIC_DECL.
#ifndef GENERIC_VALUE_DECL
#ifdef VALUE_DECL
#define GENERIC_VALUE_DECL(Id, Parent) VALUE_DECL(Id, Parent)
#else
#define GENERIC_VALUE_DECL(Id, Parent) GENERIC_DECL(Id, Parent)
#endif
#endif

/// ITERABLE_GENERIC_VALUE_DECL(Id, Parent)
///   Used for subclasses of ValueDecl that are also IterableDeclContexts and
///   GenericContexts. The default behavior is to do the same as for
///   ITERABLE_GENERIC_DECL.
#ifndef ITERABLE_GENERIC_VALUE_DECL
#ifdef VALUE_DECL
#define ITERABLE_GENERIC_VALUE_DECL(Id, Parent) VALUE_DECL(Id, Parent)
#else
#define ITERABLE_GENERIC_VALUE_DECL(Id, Parent) ITERABLE_GENERIC_DECL(Id,Parent)
#endif
#endif

/// OPERATOR_DECL(Id, Parent)
///   Used for subclasses of OperatorDecl. The default behavior is to do
///   the same as for Decl.
#ifndef OPERATOR_DECL
#define OPERATOR_DECL(Id, Parent) DECL(Id, Parent)
#endif

/// NOMINAL_TYPE_DECL(Id, Parent)
///   Used for subclasses of NominalTypeDecl.  The default behavior is
///   to do the same as for ITERABLE_GENERIC_VALUE_DECL.
#ifndef NOMINAL_TYPE_DECL
#define NOMINAL_TYPE_DECL(Id, Parent) ITERABLE_GENERIC_VALUE_DECL(Id, Parent)
#endif

/// ABSTRACT_FUNCTION_DECL(Id, Parent)
///   Used for subclasses of AbstractFunction. The default behavior is
///   to do the same as for GENERIC_VALUE_DECL.
#ifndef ABSTRACT_FUNCTION_DECL
#define ABSTRACT_FUNCTION_DECL(Id, Parent) GENERIC_VALUE_DECL(Id, Parent)
#endif

/// VALUE_DECL(Id, Parent)
///   Used for subclasses of ValueDecl.  The default behavior is to do
///   the same as for Decl.
#ifndef VALUE_DECL
#define VALUE_DECL(Id, Parent) DECL(Id, Parent)
#endif

/// A convenience for determining the range of declarations.  These will always
/// appear immediately after the last member.
#ifndef DECL_RANGE
#define DECL_RANGE(Id, First, Last)
#endif

#ifndef LAST_DECL
#define LAST_DECL(Id)
#endif

// NOTE: For performance, maximize the numer of [important] abstract Decls
// where "First_XYZDecl" == 0 to improve isa/dyn_cast code gen.

ABSTRACT_DECL(Value, Decl)
  ABSTRACT_DECL(Type, ValueDecl)
    ABSTRACT_DECL(GenericType, TypeDecl)
      ABSTRACT_DECL(NominalType, GenericTypeDecl)
        NOMINAL_TYPE_DECL(Enum, NominalTypeDecl)
        NOMINAL_TYPE_DECL(Struct, NominalTypeDecl)
        NOMINAL_TYPE_DECL(Class, NominalTypeDecl)
        NOMINAL_TYPE_DECL(Interface, NominalTypeDecl)
        DECL_RANGE(NominalType, Enum, Interface)
  
      GENERIC_VALUE_DECL(TypeAlias, GenericTypeDecl)
      DECL_RANGE(GenericType, Enum, TypeAlias)
    ABSTRACT_DECL(AbstractTypeParam, TypeDecl)
      VALUE_DECL(GenericTypeParam, AbstractTypeParamDecl)
      DECL_RANGE(AbstractTypeParam, GenericTypeParam, AssociatedType)
    CONTEXT_VALUE_DECL(Module, TypeDecl)
    DECL_RANGE(Type, Enum, Module)
  ABSTRACT_DECL(AbstractStorage, ValueDecl)
    VALUE_DECL(Var, AbstractStorageDecl)
      VALUE_DECL(Param, VarDecl)
    GENERIC_VALUE_DECL(Subscript, AbstractStorageDecl)
    DECL_RANGE(AbstractStorage, Var, Subscript)
  ABSTRACT_DECL(AbstractFunction, ValueDecl)
    ABSTRACT_FUNCTION_DECL(Constructor, AbstractFunctionDecl)
    ABSTRACT_FUNCTION_DECL(Destructor, AbstractFunctionDecl)
    ABSTRACT_FUNCTION_DECL(Fun, AbstractFunctionDecl)
    DECL_RANGE(AbstractFunction, Constructor, Accessor)

  CONTEXT_VALUE_DECL(EnumElement, ValueDecl)
  DECL_RANGE(Value, Enum, EnumElement)

ITERABLE_GENERIC_DECL(Extension, Decl)
CONTEXT_DECL(TopLevelCode, Decl)


DECL(Import, Decl)
DECL(IfConfig, Decl)
DECL(EnumCase, Decl)


LAST_DECL(PostfixOperator)

#undef NOMINAL_TYPE_DECL
#undef CONTEXT_DECL
#undef ITERABLE_NONGENERIC_DECL
#undef GENERIC_DECL
#undef ITERABLE_GENERIC_DECL
#undef ITERABLE_DECL
#undef CONTEXT_VALUE_DECL
#undef GENERIC_VALUE_DECL
#undef ITERABLE_GENERIC_VALUE_DECL
#undef ABSTRACT_FUNCTION_DECL
#undef VALUE_DECL
#undef DECL_RANGE
#undef ABSTRACT_DECL
#undef OPERATOR_DECL
#undef DECL
#undef LAST_DECL
